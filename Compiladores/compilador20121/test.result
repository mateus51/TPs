Starting parse
Entering state 0
Reading a token: Next token is token PROGRAM ()
Shifting token PROGRAM ()
Entering state 1
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 3
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 5
Reading a token: Next token is token BEGIN_TOK ()
Reducing stack by rule 15 (line 91):
-> $$ = nterm vazio ()
Stack now 0 1 3 5
Entering state 16
Next token is token BEGIN_TOK ()
Reducing stack by rule 4 (line 74):
   $1 = nterm vazio ()
-> $$ = nterm decl_list ()
Stack now 0 1 3 5
Entering state 11
Next token is token BEGIN_TOK ()
Shifting token BEGIN_TOK ()
Entering state 19
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 35
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 64
Reducing stack by rule 81 (line 185):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 11 19 35
Entering state 75
Reducing stack by rule 64 (line 163):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 11 19 35
Entering state 73
Reducing stack by rule 62 (line 160):
   $1 = nterm factor ()
-> $$ = nterm factor_a ()
Stack now 0 1 3 5 11 19 35
Entering state 72
Reducing stack by rule 59 (line 156):
   $1 = nterm factor_a ()
-> $$ = nterm term ()
Stack now 0 1 3 5 11 19 35
Entering state 71
Reading a token: Next token is token THEN ()
Reducing stack by rule 57 (line 153):
   $1 = nterm term ()
-> $$ = nterm simple_expr ()
Stack now 0 1 3 5 11 19 35
Entering state 70
Next token is token THEN ()
Reducing stack by rule 50 (line 144):
   $1 = nterm simple_expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 11 19 35
Entering state 69
Reducing stack by rule 44 (line 133):
   $1 = nterm expr ()
-> $$ = nterm cond ()
Stack now 0 1 3 5 11 19 35
Entering state 68
Next token is token THEN ()
Shifting token THEN ()
Entering state 91
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 35
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 64
Reducing stack by rule 81 (line 185):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 11 19 35 68 91 35
Entering state 75
Reducing stack by rule 64 (line 163):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 11 19 35 68 91 35
Entering state 73
Reducing stack by rule 62 (line 160):
   $1 = nterm factor ()
-> $$ = nterm factor_a ()
Stack now 0 1 3 5 11 19 35 68 91 35
Entering state 72
Reducing stack by rule 59 (line 156):
   $1 = nterm factor_a ()
-> $$ = nterm term ()
Stack now 0 1 3 5 11 19 35 68 91 35
Entering state 71
Reading a token: Next token is token THEN ()
Reducing stack by rule 57 (line 153):
   $1 = nterm term ()
-> $$ = nterm simple_expr ()
Stack now 0 1 3 5 11 19 35 68 91 35
Entering state 70
Next token is token THEN ()
Reducing stack by rule 50 (line 144):
   $1 = nterm simple_expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 11 19 35 68 91 35
Entering state 69
Reducing stack by rule 44 (line 133):
   $1 = nterm expr ()
-> $$ = nterm cond ()
Stack now 0 1 3 5 11 19 35 68 91 35
Entering state 68
Next token is token THEN ()
Shifting token THEN ()
Entering state 91
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 38
Reading a token: Next token is token LPAR ()
Shifting token LPAR ()
Entering state 79
Reading a token: Next token is token CHAR_CONSTANT ()
Shifting token CHAR_CONSTANT ()
Entering state 66
Reducing stack by rule 83 (line 187):
   $1 = token CHAR_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 11 19 35 68 91 35 68 91 38 79
Entering state 75
Reducing stack by rule 64 (line 163):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 11 19 35 68 91 35 68 91 38 79
Entering state 73
Reducing stack by rule 62 (line 160):
   $1 = nterm factor ()
-> $$ = nterm factor_a ()
Stack now 0 1 3 5 11 19 35 68 91 35 68 91 38 79
Entering state 72
Reducing stack by rule 59 (line 156):
   $1 = nterm factor_a ()
-> $$ = nterm term ()
Stack now 0 1 3 5 11 19 35 68 91 35 68 91 38 79
Entering state 71
Reading a token: Next token is token RPAR ()
Reducing stack by rule 57 (line 153):
   $1 = nterm term ()
-> $$ = nterm simple_expr ()
Stack now 0 1 3 5 11 19 35 68 91 35 68 91 38 79
Entering state 70
Next token is token RPAR ()
Reducing stack by rule 50 (line 144):
   $1 = nterm simple_expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 11 19 35 68 91 35 68 91 38 79
Entering state 103
Reducing stack by rule 48 (line 141):
   $1 = nterm expr ()
-> $$ = nterm expr_list ()
Stack now 0 1 3 5 11 19 35 68 91 35 68 91 38 79
Entering state 102
Next token is token RPAR ()
Shifting token RPAR ()
Entering state 129
Reducing stack by rule 47 (line 139):
   $1 = token WRITE ()
   $2 = token LPAR ()
   $3 = nterm expr_list ()
   $4 = token RPAR ()
-> $$ = nterm write_stmt ()
Stack now 0 1 3 5 11 19 35 68 91 35 68 91
Entering state 47
Reducing stack by rule 38 (line 124):
   $1 = nterm write_stmt ()
-> $$ = nterm stmt ()
Stack now 0 1 3 5 11 19 35 68 91 35 68 91
Entering state 117
Reading a token: Next token is token ELSE ()
Shifting token ELSE ()
Entering state 136
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 38
Reading a token: Next token is token LPAR ()
Shifting token LPAR ()
Entering state 79
Reading a token: Next token is token CHAR_CONSTANT ()
Shifting token CHAR_CONSTANT ()
Entering state 66
Reducing stack by rule 83 (line 187):
   $1 = token CHAR_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 11 19 35 68 91 35 68 91 117 136 38 79
Entering state 75
Reducing stack by rule 64 (line 163):
   $1 = nterm constant ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 11 19 35 68 91 35 68 91 117 136 38 79
Entering state 73
Reducing stack by rule 62 (line 160):
   $1 = nterm factor ()
-> $$ = nterm factor_a ()
Stack now 0 1 3 5 11 19 35 68 91 35 68 91 117 136 38 79
Entering state 72
Reducing stack by rule 59 (line 156):
   $1 = nterm factor_a ()
-> $$ = nterm term ()
Stack now 0 1 3 5 11 19 35 68 91 35 68 91 117 136 38 79
Entering state 71
Reading a token: Next token is token RPAR ()
Reducing stack by rule 57 (line 153):
   $1 = nterm term ()
-> $$ = nterm simple_expr ()
Stack now 0 1 3 5 11 19 35 68 91 35 68 91 117 136 38 79
Entering state 70
Next token is token RPAR ()
Reducing stack by rule 50 (line 144):
   $1 = nterm simple_expr ()
-> $$ = nterm expr ()
Stack now 0 1 3 5 11 19 35 68 91 35 68 91 117 136 38 79
Entering state 103
Reducing stack by rule 48 (line 141):
   $1 = nterm expr ()
-> $$ = nterm expr_list ()
Stack now 0 1 3 5 11 19 35 68 91 35 68 91 117 136 38 79
Entering state 102
Next token is token RPAR ()
Shifting token RPAR ()
Entering state 129
Reducing stack by rule 47 (line 139):
   $1 = token WRITE ()
   $2 = token LPAR ()
   $3 = nterm expr_list ()
   $4 = token RPAR ()
-> $$ = nterm write_stmt ()
Stack now 0 1 3 5 11 19 35 68 91 35 68 91 117 136
Entering state 47
Reducing stack by rule 38 (line 124):
   $1 = nterm write_stmt ()
-> $$ = nterm stmt ()
Stack now 0 1 3 5 11 19 35 68 91 35 68 91 117 136
Entering state 141
Reducing stack by rule 43 (line 131):
   $1 = token IF ()
   $2 = nterm cond ()
   $3 = token THEN ()
   $4 = nterm stmt ()
   $5 = token ELSE ()
   $6 = nterm stmt ()
-> $$ = nterm if_stmt ()
Stack now 0 1 3 5 11 19 35 68 91
Entering state 44
Reducing stack by rule 35 (line 121):
   $1 = nterm if_stmt ()
-> $$ = nterm stmt ()
Stack now 0 1 3 5 11 19 35 68 91
Entering state 117
Reading a token: Next token is token END ()
Reducing stack by rule 42 (line 130):
   $1 = token IF ()
   $2 = nterm cond ()
   $3 = token THEN ()
   $4 = nterm stmt ()
-> $$ = nterm if_stmt ()
Stack now 0 1 3 5 11 19
Entering state 44
Reducing stack by rule 35 (line 121):
   $1 = nterm if_stmt ()
-> $$ = nterm stmt ()
Stack now 0 1 3 5 11 19
Entering state 42
Reducing stack by rule 33 (line 118):
   $1 = nterm stmt ()
-> $$ = nterm stmt_list ()
Stack now 0 1 3 5 11 19
Entering state 41
Next token is token END ()
Shifting token END ()
Entering state 82
Reducing stack by rule 31 (line 115):
   $1 = token BEGIN_TOK ()
   $2 = nterm stmt_list ()
   $3 = token END ()
-> $$ = nterm compound_stmt ()
Stack now 0 1 3 5 11
Entering state 20
Reducing stack by rule 1 (line 69):
   $1 = token PROGRAM ()
   $2 = token ID ()
   $3 = token SEMICOLON ()
   $4 = nterm decl_list ()
   $5 = nterm compound_stmt ()
reduced program
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
